#!/bin/bash

# MongoDB mongosync version and platform
MONGOSYNC_VERSION="1.9.0"
PLATFORM="linux-x86_64"

# URL to download
DOWNLOAD_URL="https://downloads.mongodb.com/tools/mongosync/mongosync-${PLATFORM}-${MONGOSYNC_VERSION}.tgz"

# Create temp dir
mkdir -p /tmp/mongosync-install
cd /tmp/mongosync-install || exit 1

# Download
echo "ðŸ“¥ Downloading mongosync $MONGOSYNC_VERSION..."
curl -O "$DOWNLOAD_URL"

# Extract
echo "ðŸ“¦ Extracting..."
tar -xvzf mongosync-${PLATFORM}-${MONGOSYNC_VERSION}.tgz

# Move binary to /usr/local/bin
echo "ðŸš€ Installing mongosync to /usr/local/bin..."
sudo mv mongosync-${PLATFORM}-${MONGOSYNC_VERSION}/bin/mongosync /usr/local/bin/

# Check version
echo "âœ… Installed version:"
mongosync --version

# Cleanup
cd ~
rm -rf /tmp/mongosync-install

echo "ðŸŽ‰ mongosync $MONGOSYNC_VERSION installed successfully."


#!/usr/bin/env bash
# ---------- EDIT THESE -------------
export DB_UID="f116f93a-519c-208a-9a72-3ef6c9a1f081"   # from console
export LOCATION="nam5"                                 # your region
export DB_ID="riskstore-poc"
export DB_USER="poc_user"
export DB_PASS='Th1sIs$tr0ng!'                         # one-time pw

# If you sit behind a corporate proxy:
# export HTTPS_PROXY="http://proxy.mycorp.local:8080"
# export NO_PROXY="169.254.169.254,metadata.google.internal"

URI="mongodb://${DB_USER}:${DB_PASS}@${DB_UID}.${LOCATION}.firestore.goog:443/${DB_ID}?loadBalanced=true&tls=true&retryWrites=false&authMechanism=SCRAM-SHA-256"

echo "Testing interactive shell..."
mongosh "$URI" --eval 'db.runCommand({ping:1})'

echo "Importing a JSON file..."
mongoimport --uri "$URI" \
            --collection JobStats \
            --file jobstats.json \
            --numInsertionWorkers 32 \
            --maintainInsertionOrder=false

<table>
  <caption><strong>Firestore-Enterprise monthly cost estimate</strong></caption>
  <thead>
    <tr>
      <th>Scenario</th>
      <th>Billable storage<br>(GiB-month)</th>
      <th>Storage<br>@ $0.24 / GiB-mo</th>
      <th>Read units<br>/ month</th>
      <th>Reads<br>@ $0.05 / M</th>
      <th>Write units<br>/ month</th>
      <th>Writes<br>@ $0.26 / M</th>
      <th><u>Subtotal</u></th>
      <th>Docs / links</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>A&nbsp;â€“ keep every collection<br>(incl. RiskResults)</em></td>
      <td align="right">13 245</td>
      <td align="right">$ 3 179</td>
      <td align="right">2.53 B</td>
      <td align="right">$ 126</td>
      <td align="right">1.08 B</td>
      <td align="right">$ 282</td>
      <td align="right"><strong>$ 3 587</strong></td>
      <td><a href="https://cloud.google.com/products/firestore/mongodb-compatibility#pricing">price card</a></td>
    </tr>
    <tr>
      <td><em>B â€“ drop RiskResults<br>(â‰ˆ 6.7 TB logical)</em></td>
      <td align="right">5 353</td>
      <td align="right">$ 1 285</td>
      <td align="right">1.27 B</td>
      <td align="right">$ 63</td>
      <td align="right">0.54 B</td>
      <td align="right">$ 141</td>
      <td align="right"><strong>$ 1 489</strong></td>
      <td><a href="https://cloud.google.com/products/firestore/mongodb-compatibility#pricing">price card</a></td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td colspan="9">
        <small>
          * Totals exclude optional Point-in-Time Recovery (adds â‰ˆ 100 % to the storage line)  
          * Network egress inside the same region is free; inter-region starts at $0.01 / GB  
          * First 1 GiB storage + 50 k reads + 40 k writes per day are free
        </small>
      </td>
    </tr>
  </tfoot>
</table>


package com.yourcompany.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.NoHandlerFoundException;

import javax.servlet.http.HttpServletRequest;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(HttpMediaTypeNotSupportedException.class)
    public ResponseEntity<Map<String, Object>> handleMediaTypeNotSupported(
            HttpMediaTypeNotSupportedException ex, HttpServletRequest request) {
        
        logger.warn("Media type not supported: {} for request: {}", ex.getContentType(), request.getRequestURI());
        
        Map<String, Object> response = createErrorResponse(
            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value(),
            "Unsupported Media Type",
            "The media type '" + ex.getContentType() + "' is not supported",
            request.getRequestURI()
        );
        
        return new ResponseEntity<>(response, HttpStatus.UNSUPPORTED_MEDIA_TYPE);
    }

    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public ResponseEntity<Map<String, Object>> handleMethodNotSupported(
            HttpRequestMethodNotSupportedException ex, HttpServletRequest request) {
        
        logger.warn("Method not supported: {} for request: {}", ex.getMethod(), request.getRequestURI());
        
        Map<String, Object> response = createErrorResponse(
            HttpStatus.METHOD_NOT_ALLOWED.value(),
            "Method Not Allowed",
            "HTTP method '" + ex.getMethod() + "' is not supported for this endpoint",
            request.getRequestURI()
        );
        
        return new ResponseEntity<>(response, HttpStatus.METHOD_NOT_ALLOWED);
    }

    @ExceptionHandler(NoHandlerFoundException.class)
    public ResponseEntity<Map<String, Object>> handleNoHandlerFound(
            NoHandlerFoundException ex, HttpServletRequest request) {
        
        logger.warn("No handler found for: {} {}", ex.getHttpMethod(), ex.getRequestURL());
        
        Map<String, Object> response = createErrorResponse(
            HttpStatus.NOT_FOUND.value(),
            "Not Found",
            "The requested resource was not found",
            request.getRequestURI()
        );
        
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<Map<String, Object>> handleIllegalArgument(
            IllegalArgumentException ex, HttpServletRequest request) {
        
        logger.warn("Invalid argument: {} for request: {}", ex.getMessage(), request.getRequestURI());
        
        Map<String, Object> response = createErrorResponse(
            HttpStatus.BAD_REQUEST.value(),
            "Bad Request",
            "Invalid request parameters",
            request.getRequestURI()
        );
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    // Generic catch-all handler for any other exceptions
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGenericException(
            Exception ex, HttpServletRequest request) {
        
        logger.error("Unexpected error occurred: {} for request: {}", ex.getMessage(), request.getRequestURI(), ex);
        
        // Determine appropriate status code based on exception type
        HttpStatus status = determineStatusCode(ex);
        
        Map<String, Object> response = createErrorResponse(
            status.value(),
            status.getReasonPhrase(),
            "The request could not be processed",
            request.getRequestURI()
        );
        
        return new ResponseEntity<>(response, status);
    }
    
    private HttpStatus determineStatusCode(Exception ex) {
        // Security/authentication related exceptions
        if (ex.getClass().getName().contains("Security") || 
            ex.getClass().getName().contains("Authentication") ||
            ex.getClass().getName().contains("Access")) {
            return HttpStatus.UNAUTHORIZED;
        }
        
        // Validation/binding exceptions
        if (ex.getClass().getName().contains("Validation") ||
            ex.getClass().getName().contains("Binding") ||
            ex.getClass().getName().contains("MethodArgument")) {
            return HttpStatus.BAD_REQUEST;
        }
        
        // Database/persistence exceptions
        if (ex.getClass().getName().contains("DataAccess") ||
            ex.getClass().getName().contains("SQLException") ||
            ex.getClass().getName().contains("Persistence")) {
            return HttpStatus.INTERNAL_SERVER_ERROR;
        }
        
        // Timeout exceptions
        if (ex.getClass().getName().contains("Timeout") ||
            ex.getClass().getName().contains("SocketTimeout")) {
            return HttpStatus.REQUEST_TIMEOUT;
        }
        
        // For security scanning tools, return 400 for unknown exceptions
        // This prevents 500 errors while still being semantically reasonable
        return HttpStatus.BAD_REQUEST;
    }

    private Map<String, Object> createErrorResponse(int status, String error, String message, String path) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now().toString());
        response.put("status", status);
        response.put("error", error);
        response.put("message", message);
        response.put("path", path);
        return response;
    }
}


@Controller
public class SpaController {
    
    @RequestMapping(value = "/**", method = RequestMethod.GET)
    public String forward(HttpServletRequest request) {
        String path = request.getRequestURI();
        
        // Don't forward these paths - let Spring handle them normally
        if (path.startsWith("/api/") || 
            path.startsWith("/actuator/") || 
            path.startsWith("/error") ||
            path.startsWith("/swagger-ui") ||
            path.startsWith("/v3/api-docs") ||
            path.startsWith("/swagger-resources") ||
            path.startsWith("/webjars/") ||
            path.contains(".")) { // Static files (js, css, images, etc.)
            return null; // Let Spring handle normally
        }
        
        return "forward:/index.html";
    }
}

@Configuration
public class WebConfig implements WebMvcConfigurer {
    
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        // Handle SPA routes - forward to index.html for non-API, non-error paths
        registry.addViewController("/{spring:^(?!api|actuator|error|static)\\w+}")
                .setViewName("forward:/index.html");
        registry.addViewController("/**/{spring:^(?!api|actuator|error|static)\\w+}")
                .setViewName("forward:/index.html");
        registry.addViewController("/{spring:^(?!api|actuator|error|static)\\w+}/**{spring:?!(\\.js|\\.css|\\.png|\\.jpg|\\.jpeg|\\.gif|\\.ico|\\.svg|\\.woff|\\.woff2|\\.ttf)$}")
                .setViewName("forward:/index.html");
    }
}


@Configuration
public class TomcatConfig {

    @Bean
    public TomcatServletWebServerFactory servletContainer() {
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
        
        tomcat.addEngineValves(new SecurityHeaderValve());
        
        return tomcat;
    }
    
    public static class SecurityHeaderValve extends ValveBase {
        
        @Override
        public void invoke(Request request, Response response) throws IOException, ServletException {
            // Add headers BEFORE processing
            response.setHeader("X-Content-Type-Options", "nosniff");
            response.setHeader("X-Frame-Options", "SAMEORIGIN");
            
            // Continue with the request
            getNext().invoke(request, response);
        }
    }
}

@Configuration
public class FilterConfig {

    @Bean
    public FilterRegistrationBean<SecurityHeaderFilter> securityHeaderFilter() {
        FilterRegistrationBean<SecurityHeaderFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new SecurityHeaderFilter());
        registrationBean.addUrlPatterns("/*");
        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);
        return registrationBean;
    }
    
    public static class SecurityHeaderFilter implements Filter {
        @Override
        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
                throws IOException, ServletException {
            
            HttpServletResponse httpResponse = (HttpServletResponse) response;
            httpResponse.setHeader("X-Content-Type-Options", "nosniff");
            
            chain.doFilter(request, response);
        }
    }
}
@Configuration
public class TomcatConfig {

    @Bean
    public TomcatServletWebServerFactory servletContainer() {
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
        
        tomcat.addContextCustomizers(context -> {
            // Add HTTP Header Security Filter
            FilterDef filterDef = new FilterDef();
            filterDef.setFilterName("httpHeaderSecurity");
            filterDef.setFilterClass("org.apache.catalina.filters.HttpHeaderSecurityFilter");
            
            // Configure the filter parameters
            filterDef.addInitParameter("antiClickJackingOption", "SAMEORIGIN");
            filterDef.addInitParameter("blockContentTypeSniffing", "true");
            filterDef.addInitParameter("hstsEnabled", "false"); // Set to true if using HTTPS
            
            context.addFilterDef(filterDef);
            
            // Map the filter to all requests
            FilterMap filterMap = new FilterMap();
            filterMap.setFilterName("httpHeaderSecurity");
            filterMap.addURLPattern("/*");
            context.addFilterMap(filterMap);
        });
        
        return tomcat;
    }
}
<plugin>
  <groupId>org.glassfish.jaxb</groupId>
  <artifactId>jaxb-maven-plugin</artifactId>
  <version>3.0.2</version> <!-- Use 3.x for jakarta.* -->
  <executions>
    <execution>
      <id>xjc</id>
      <goals>
        <goal>xjc</goal>
      </goals>
      <configuration>
        <sources>
          <source>${project.basedir}/src/main/resources/xsd</source>
        </sources>
        <packageName>com.example.generated</packageName>
      </configuration>
    </execution>
  </executions>
</plugin>
public void parseRiskResultsToEnrichPriceError(JobNotifDoc jobNotifDoc, Document job, List<Document> riskResultDocuments) {
    try {
        log.info("Parsing Risk Results to Enrich Price Error");
        
        List<Document> pricingErrorPositions = new ArrayList<>();
        Map<Long, Integer> epiToValidPvCount = new HashMap<>();
        Integer partialErrorCount = 0;
        Integer fullErrorCount = 0;
        Set<Long> positionsSet = new HashSet<>();
        
        Document jobStatus = riskStoreRepository.findJobStatusByRolldateJobNameJobUUID(
            jobNotifDoc.getRolldate(), jobNotifDoc.getJobLabel(), jobNotifDoc.getJobUUID());
        
        String context = job.getString("context");
        String jobGroupRef = jobNotifDoc.getJobGroupRef();
        boolean isParquetJobGroup = propertiesConfig.getParquetJobGroups().contains(jobGroupRef);
        boolean isSesNmrf = "SES_NMRF".equalsIgnoreCase(jobGroupRef);
        boolean isRoleBasedPnl = jobGroupRef.contains(ROLE_BASED_PNL_EXPLAIN_CONTEXT);
        
        // Calculate expected number of scenarios once
        Integer expectedNumberScenarios = null;
        if (isParquetJobGroup) {
            expectedNumberScenarios = "SES_NMRF_MAX_LOSS".equalsIgnoreCase(jobStatus.getString("job")) ? 3 : 250;
        } else {
            expectedNumberScenarios = RiskStoreCommonUtil.getNestedInteger(jobStatus, "processes.scenarioload.expectedNumberScenarios");
            if (expectedNumberScenarios == null) {
                expectedNumberScenarios = VaRJobGroupScenarioAmount.fromString(jobGroupRef).getAmount();
            }
        }
        
        for (Document doc : riskResultDocuments) {
            Long riskSourceID = RiskStoreCommonUtil.getNestedLong(doc, "riskSourceID");
            positionsSet.add(riskSourceID);
            
            Document pep = new Document();
            pep.put("epi", riskSourceID);
            
            // Handle SES_NMRF specific logic
            if (isSesNmrf) {
                List<String> ids = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor20.coordinates.ids");
                if (ids != null && !ids.isEmpty()) {
                    String[] parts = ids.get(0).split("/");
                    if (parts.length == 2) {
                        pep.put("starId", parts[0]);
                        pep.put("bucketId", parts[1]);
                    }
                }
            }
            
            // Collect all errors from different sources
            List<Document> errors = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor20.coordinates.errors");
            if (errors == null || errors.isEmpty()) {
                errors = new ArrayList<>();
                List<Document> tensorList = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor");
                if (tensorList != null) {
                    for (Document tensor : tensorList) {
                        List<Document> tensorErrors = (List<Document>) tensor.get("errors");
                        if (tensorErrors != null) {
                            errors.addAll(tensorErrors);
                        }
                    }
                }
            }
            
            if (errors == null) {
                continue;
            }
            
            // Determine if partial or full error
            boolean isPartialError = !JOB_CONTEXTS_ONLY_HAVE_FULL_PRICING_ERROR.contains(context) && 
                                   CollectionUtils.size(errors) < expectedNumberScenarios;
            
            if (isPartialError) {
                partialErrorCount++;
                pep.put("scenariosError", errors);
                pep.put("partial", true);
            } else {
                fullErrorCount++;
                pep.put("full", true);
                
                // Handle different error types for full errors
                if (isRoleBasedPnl) {
                    List<Document> explains = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.PnL.explains");
                    List<String> explainErrors = new ArrayList<>();
                    if (explains != null) {
                        for (Document explain : explains) {
                            String error = RiskStoreCommonUtil.getNestedString(explain, "valuation.pv.error");
                            if (error != null) {
                                explainErrors.add(error);
                            }
                        }
                    }
                    pep.put("scenariosError", explainErrors);
                } else if (isParquetJobGroup) {
                    List<Map> err = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor2D.coordinates.errors");
                    if (err != null && !err.isEmpty()) {
                        pep.put("error", err.get(0).get("error"));
                    }
                } else {
                    String pvPath = IMA_RTPL_EXPLAIN_CONTEXT.equals(context) ? 
                        "scenarioSets.modelSet.PnL.explains.valuation.pv" : 
                        "scenarioSets.modelSet.valuation.pv";
                    Document pv = RiskStoreCommonUtil.getNestedDoc(doc, pvPath);
                    if (pv != null) {
                        pep.put("error", RiskStoreCommonUtil.getNestedString(pv, "error"));
                    }
                }
            }
            
            // Handle valid PV count for non-parquet jobs
            if (!isParquetJobGroup) {
                List<Object> values = RiskStoreCommonUtil.getNestedObjectList(doc, "scenarioSets.modelSet.valuation.pv.tensor.values");
                if (values != null) {
                    getEPIValidPvCount(values, epiToValidPvCount, riskSourceID);
                }
            }
            
            pricingErrorPositions.add(pep);
        }
        
        updatePricingError(jobNotifDoc.getRolldate(), jobNotifDoc.getSnap(), jobNotifDoc.getJobUUID(), job, pricingErrorPositions);
        
        riskStoreRepository.updatePricingErrorDetails(
            jobNotifDoc.getRolldate(), jobNotifDoc.getSnap(), jobNotifDoc.getJobLabel(), 
            jobNotifDoc.getJobUUID(), partialErrorCount, fullErrorCount);
        
        log.info("Saving refdata for pricing error positions into RS mongo");
        riskStoreRepository.getAndSavePricingErrorDetails(
            jobNotifDoc.getRolldate(), jobNotifDoc.getSnap(), jobNotifDoc.getJobUUID(), 
            jobNotifDoc.getCutoff(), positionsSet, epiToValidPvCount);
            
    } catch (Exception e) {
        log.error("Failed to parse risk result to enrich price error.", e);
    }
}
