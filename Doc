@Configuration
public class WebConfig implements WebMvcConfigurer {
    
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        // Handle SPA routes - forward to index.html for non-API, non-error paths
        registry.addViewController("/{spring:^(?!api|actuator|error|static)\\w+}")
                .setViewName("forward:/index.html");
        registry.addViewController("/**/{spring:^(?!api|actuator|error|static)\\w+}")
                .setViewName("forward:/index.html");
        registry.addViewController("/{spring:^(?!api|actuator|error|static)\\w+}/**{spring:?!(\\.js|\\.css|\\.png|\\.jpg|\\.jpeg|\\.gif|\\.ico|\\.svg|\\.woff|\\.woff2|\\.ttf)$}")
                .setViewName("forward:/index.html");
    }
}


@Configuration
public class TomcatConfig {

    @Bean
    public TomcatServletWebServerFactory servletContainer() {
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
        
        tomcat.addEngineValves(new SecurityHeaderValve());
        
        return tomcat;
    }
    
    public static class SecurityHeaderValve extends ValveBase {
        
        @Override
        public void invoke(Request request, Response response) throws IOException, ServletException {
            // Add headers BEFORE processing
            response.setHeader("X-Content-Type-Options", "nosniff");
            response.setHeader("X-Frame-Options", "SAMEORIGIN");
            
            // Continue with the request
            getNext().invoke(request, response);
        }
    }
}

@Configuration
public class FilterConfig {

    @Bean
    public FilterRegistrationBean<SecurityHeaderFilter> securityHeaderFilter() {
        FilterRegistrationBean<SecurityHeaderFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new SecurityHeaderFilter());
        registrationBean.addUrlPatterns("/*");
        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);
        return registrationBean;
    }
    
    public static class SecurityHeaderFilter implements Filter {
        @Override
        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
                throws IOException, ServletException {
            
            HttpServletResponse httpResponse = (HttpServletResponse) response;
            httpResponse.setHeader("X-Content-Type-Options", "nosniff");
            
            chain.doFilter(request, response);
        }
    }
}
@Configuration
public class TomcatConfig {

    @Bean
    public TomcatServletWebServerFactory servletContainer() {
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
        
        tomcat.addContextCustomizers(context -> {
            // Add HTTP Header Security Filter
            FilterDef filterDef = new FilterDef();
            filterDef.setFilterName("httpHeaderSecurity");
            filterDef.setFilterClass("org.apache.catalina.filters.HttpHeaderSecurityFilter");
            
            // Configure the filter parameters
            filterDef.addInitParameter("antiClickJackingOption", "SAMEORIGIN");
            filterDef.addInitParameter("blockContentTypeSniffing", "true");
            filterDef.addInitParameter("hstsEnabled", "false"); // Set to true if using HTTPS
            
            context.addFilterDef(filterDef);
            
            // Map the filter to all requests
            FilterMap filterMap = new FilterMap();
            filterMap.setFilterName("httpHeaderSecurity");
            filterMap.addURLPattern("/*");
            context.addFilterMap(filterMap);
        });
        
        return tomcat;
    }
}
<plugin>
  <groupId>org.glassfish.jaxb</groupId>
  <artifactId>jaxb-maven-plugin</artifactId>
  <version>3.0.2</version> <!-- Use 3.x for jakarta.* -->
  <executions>
    <execution>
      <id>xjc</id>
      <goals>
        <goal>xjc</goal>
      </goals>
      <configuration>
        <sources>
          <source>${project.basedir}/src/main/resources/xsd</source>
        </sources>
        <packageName>com.example.generated</packageName>
      </configuration>
    </execution>
  </executions>
</plugin>
public void parseRiskResultsToEnrichPriceError(JobNotifDoc jobNotifDoc, Document job, List<Document> riskResultDocuments) {
    try {
        log.info("Parsing Risk Results to Enrich Price Error");
        
        List<Document> pricingErrorPositions = new ArrayList<>();
        Map<Long, Integer> epiToValidPvCount = new HashMap<>();
        Integer partialErrorCount = 0;
        Integer fullErrorCount = 0;
        Set<Long> positionsSet = new HashSet<>();
        
        Document jobStatus = riskStoreRepository.findJobStatusByRolldateJobNameJobUUID(
            jobNotifDoc.getRolldate(), jobNotifDoc.getJobLabel(), jobNotifDoc.getJobUUID());
        
        String context = job.getString("context");
        String jobGroupRef = jobNotifDoc.getJobGroupRef();
        boolean isParquetJobGroup = propertiesConfig.getParquetJobGroups().contains(jobGroupRef);
        boolean isSesNmrf = "SES_NMRF".equalsIgnoreCase(jobGroupRef);
        boolean isRoleBasedPnl = jobGroupRef.contains(ROLE_BASED_PNL_EXPLAIN_CONTEXT);
        
        // Calculate expected number of scenarios once
        Integer expectedNumberScenarios = null;
        if (isParquetJobGroup) {
            expectedNumberScenarios = "SES_NMRF_MAX_LOSS".equalsIgnoreCase(jobStatus.getString("job")) ? 3 : 250;
        } else {
            expectedNumberScenarios = RiskStoreCommonUtil.getNestedInteger(jobStatus, "processes.scenarioload.expectedNumberScenarios");
            if (expectedNumberScenarios == null) {
                expectedNumberScenarios = VaRJobGroupScenarioAmount.fromString(jobGroupRef).getAmount();
            }
        }
        
        for (Document doc : riskResultDocuments) {
            Long riskSourceID = RiskStoreCommonUtil.getNestedLong(doc, "riskSourceID");
            positionsSet.add(riskSourceID);
            
            Document pep = new Document();
            pep.put("epi", riskSourceID);
            
            // Handle SES_NMRF specific logic
            if (isSesNmrf) {
                List<String> ids = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor20.coordinates.ids");
                if (ids != null && !ids.isEmpty()) {
                    String[] parts = ids.get(0).split("/");
                    if (parts.length == 2) {
                        pep.put("starId", parts[0]);
                        pep.put("bucketId", parts[1]);
                    }
                }
            }
            
            // Collect all errors from different sources
            List<Document> errors = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor20.coordinates.errors");
            if (errors == null || errors.isEmpty()) {
                errors = new ArrayList<>();
                List<Document> tensorList = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor");
                if (tensorList != null) {
                    for (Document tensor : tensorList) {
                        List<Document> tensorErrors = (List<Document>) tensor.get("errors");
                        if (tensorErrors != null) {
                            errors.addAll(tensorErrors);
                        }
                    }
                }
            }
            
            if (errors == null) {
                continue;
            }
            
            // Determine if partial or full error
            boolean isPartialError = !JOB_CONTEXTS_ONLY_HAVE_FULL_PRICING_ERROR.contains(context) && 
                                   CollectionUtils.size(errors) < expectedNumberScenarios;
            
            if (isPartialError) {
                partialErrorCount++;
                pep.put("scenariosError", errors);
                pep.put("partial", true);
            } else {
                fullErrorCount++;
                pep.put("full", true);
                
                // Handle different error types for full errors
                if (isRoleBasedPnl) {
                    List<Document> explains = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.PnL.explains");
                    List<String> explainErrors = new ArrayList<>();
                    if (explains != null) {
                        for (Document explain : explains) {
                            String error = RiskStoreCommonUtil.getNestedString(explain, "valuation.pv.error");
                            if (error != null) {
                                explainErrors.add(error);
                            }
                        }
                    }
                    pep.put("scenariosError", explainErrors);
                } else if (isParquetJobGroup) {
                    List<Map> err = RiskStoreCommonUtil.getNestedDocList(doc, "scenarioSets.modelSet.valuation.pv.tensor2D.coordinates.errors");
                    if (err != null && !err.isEmpty()) {
                        pep.put("error", err.get(0).get("error"));
                    }
                } else {
                    String pvPath = IMA_RTPL_EXPLAIN_CONTEXT.equals(context) ? 
                        "scenarioSets.modelSet.PnL.explains.valuation.pv" : 
                        "scenarioSets.modelSet.valuation.pv";
                    Document pv = RiskStoreCommonUtil.getNestedDoc(doc, pvPath);
                    if (pv != null) {
                        pep.put("error", RiskStoreCommonUtil.getNestedString(pv, "error"));
                    }
                }
            }
            
            // Handle valid PV count for non-parquet jobs
            if (!isParquetJobGroup) {
                List<Object> values = RiskStoreCommonUtil.getNestedObjectList(doc, "scenarioSets.modelSet.valuation.pv.tensor.values");
                if (values != null) {
                    getEPIValidPvCount(values, epiToValidPvCount, riskSourceID);
                }
            }
            
            pricingErrorPositions.add(pep);
        }
        
        updatePricingError(jobNotifDoc.getRolldate(), jobNotifDoc.getSnap(), jobNotifDoc.getJobUUID(), job, pricingErrorPositions);
        
        riskStoreRepository.updatePricingErrorDetails(
            jobNotifDoc.getRolldate(), jobNotifDoc.getSnap(), jobNotifDoc.getJobLabel(), 
            jobNotifDoc.getJobUUID(), partialErrorCount, fullErrorCount);
        
        log.info("Saving refdata for pricing error positions into RS mongo");
        riskStoreRepository.getAndSavePricingErrorDetails(
            jobNotifDoc.getRolldate(), jobNotifDoc.getSnap(), jobNotifDoc.getJobUUID(), 
            jobNotifDoc.getCutoff(), positionsSet, epiToValidPvCount);
            
    } catch (Exception e) {
        log.error("Failed to parse risk result to enrich price error.", e);
    }
}
