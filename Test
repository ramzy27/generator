List<RiskMeasureName> riskMeasureNames = Arrays.asList(RiskMeasureName.values());
List<RiskLabel> riskLabels = Arrays.asList(RiskLabel.values());

List<String> foundRiskMeasureNames = sqlRequest.getValueCols().stream()
    .map(columnVO -> columnVO.field())
    .flatMap(field -> Stream.concat(riskMeasureNames.stream(), riskLabels.stream())
        .filter(riskMeasureName -> field.contains(riskMeasureName.name()))
        .map(Enum::name))
    .distinct()
    .collect(Collectors.toList());

Set<String> riskNames = Stream.concat(
    Arrays.stream(RiskMeasureName.values()).map(Enum::name),
    Arrays.stream(RiskLabel.values()).map(Enum::name)
).collect(Collectors.toSet());

List<String> foundRiskMeasureNames = sqlRequest.getValueCols().stream()
    .map(columnVO -> columnVO.field())
    .flatMap(field -> riskNames.stream().filter(field::contains))
    .distinct()
    .collect(Collectors.toList());

Set<String> riskNames = Stream.concat(
    Arrays.stream(RiskMeasureName.values()).map(Enum::name),
    Arrays.stream(RiskLabel.values()).map(Enum::name)
).collect(Collectors.toSet());

boolean hasMeasureColumns = sqlRequest.getValueCols().stream()
    .map(columnVO -> columnVO.field())
    .anyMatch(field -> riskNames.stream().anyMatch(field::contains));
import java.util.stream.Collectors;

// Assuming sqlServerPaginationRequest is an object of a class that has the getColumnPivot() method
// and getColumnPivot() returns an object that has aggColumn(), pivotColumn(), and pivotValues() methods.

String aggColumn = sqlServerPaginationRequest.getColumnPivot().aggColumn();
String pivotColumn = sqlServerPaginationRequest.getColumnPivot().pivotColumn();
String pivotValues = sqlServerPaginationRequest.getColumnPivot().pivotValues()
                            .stream()
                            .map(value -> "'" + value + "'")
                            .collect(Collectors.joining(","));

String pivotQuery = String.format(
    "PIVOT (SUM(%s) FOR %s IN (%s))",
    aggColumn, pivotColumn, pivotValues
);

// return the pivot query
return pivotQuery;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.Query;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;

public class YourServiceTest {

    @Mock
    private Firestore firestore;

    @Mock
    private FirestoreConfig fireStoreConfig;

    @Mock
    private CollectionReference collectionReference;

    @Mock
    private Query query;

    @Mock
    private ApiFuture<QuerySnapshot> apiFuture;

    @Mock
    private QuerySnapshot querySnapshot;

    @InjectMocks
    private YourService yourService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(fireStoreConfig.instance()).thenReturn(firestore);
        when(firestore.collection(anyString())).thenReturn(collectionReference);
    }

    @Test
    public void shouldGetJobMetadataByJobId() throws Exception {
        String jobId = "testJobId";
        List<QueryDocumentSnapshot> documents = new ArrayList<>();
        QueryDocumentSnapshot documentSnapshot = mock(QueryDocumentSnapshot.class);
        PostRiskEngineRequestModel model = new PostRiskEngineRequestModel();
        
        documents.add(documentSnapshot);

        when(collectionReference.whereEqualTo("riskEngineJobUUID", jobId)).thenReturn(query);
        when(query.orderBy("version", Query.Direction.DESCENDING)).thenReturn(query);
        when(query.get()).thenReturn(apiFuture);
        when(apiFuture.get()).thenReturn(querySnapshot);
        when(querySnapshot.getDocuments()).thenReturn(documents);
        when(documentSnapshot.toObject(PostRiskEngineRequestModel.class)).thenReturn(model);

        PostRiskEngineRequestModel result = yourService.getJobMetadataByJobId(jobId);

        assertNotNull(result);
        assertEquals(model, result);
    }

    @Test
    public void shouldReturnNullWhenNoDocumentsFound() throws Exception {
        String jobId = "testJobId";
        List<QueryDocumentSnapshot> documents = new ArrayList<>();

        when(collectionReference.whereEqualTo("riskEngineJobUUID", jobId)).thenReturn(query);
        when(query.orderBy("version", Query.Direction.DESCENDING)).thenReturn(query);
        when(query.get()).thenReturn(apiFuture);
        when(apiFuture.get()).thenReturn(querySnapshot);
        when(querySnapshot.getDocuments()).thenReturn(documents);

        PostRiskEngineRequestModel result = yourService.getJobMetadataByJobId(jobId);

        assertNull(result);
    }

    @Test
    public void shouldReturnNullOnException() throws Exception {
        String jobId = "testJobId";

        when(collectionReference.whereEqualTo("riskEngineJobUUID", jobId)).thenReturn(query);
        when(query.orderBy("version", Query.Direction.DESCENDING)).thenReturn(query);
        when(query.get()).thenReturn(apiFuture);
        when(apiFuture.get()).thenThrow(new InterruptedException());

        PostRiskEngineRequestModel result = yourService.getJobMetadataByJobId(jobId);

        assertNull(result);
    }
}
