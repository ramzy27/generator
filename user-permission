@Service
public class YourService {

    public void yourMethod(ServerHttpRequest request) {
        System.out.println("Starting reactive chain in service");

        ReactiveSecurityContextHolder.getContext()
            .switchIfEmpty(Mono.error(new RuntimeException("SecurityContext is empty!")))
            .map(SecurityContext::getAuthentication)
            .doOnNext(auth -> System.out.println("Authentication object: " + auth))
            .filter(auth -> auth instanceof OAuth2AuthenticationToken)
            .cast(OAuth2AuthenticationToken.class)
            .doOnNext(auth -> {
                System.out.println("Calling addPermissionUnitFilter...");
                addPermissionUnitFilter(auth, request);
            })
            .doOnError(error -> System.err.println("Error: " + error.getMessage()))
            .subscribe();  // Ensure the reactive chain is executed
    }

    private void addPermissionUnitFilter(OAuth2AuthenticationToken auth, ServerHttpRequest request) {
        // Your implementation here
        System.out.println("Permission unit filter added for: " + auth.getName());
    }
}
If the `addPermissionUnitFilter` method is not being called, this could be due to a few potential issues. Let's go through some troubleshooting steps to identify and resolve the problem.

### 1. **Check the Reactive Chain Execution**
   - Ensure that the reactive chain is actually being executed. Reactive chains only run when they are subscribed to, which you're doing with `.subscribe()`. However, if the preceding steps in the chain fail or result in an empty `Mono`, the final method might not be called.

### 2. **Verify the Authentication Type**
   - Make sure that the `Authentication` object is indeed an instance of `OAuth2AuthenticationToken`. If it’s not, the `.filter(auth -> auth instanceof OAuth2AuthenticationToken)` step will filter out the `Authentication` object, and the subsequent `.cast(OAuth2AuthenticationToken.class)` and `.subscribe()` won't be called.

   You can add some logging to check if the `Authentication` object is being filtered out:

   ```java
   ReactiveSecurityContextHolder.getContext()
       .map(SecurityContext::getAuthentication)
       .doOnNext(auth -> System.out.println("Authentication object: " + auth))
       .filter(auth -> auth instanceof OAuth2AuthenticationToken)
       .cast(OAuth2AuthenticationToken.class)
       .doOnNext(auth -> System.out.println("OAuth2AuthenticationToken: " + auth))
       .subscribe(auth -> addPermissionUnitFilter(auth, request),
           error -> System.err.println("Error: " + error.getMessage()));
   ```

   This will log the `Authentication` object before and after filtering, so you can see if it’s being correctly identified as an `OAuth2AuthenticationToken`.

### 3. **Check the Request Context**
   - Ensure that this code is being executed in the correct request context where the `SecurityContext` is available. If this is being called outside of a web request (e.g., in a background task), the `SecurityContext` may not be populated.

### 4. **Ensure Security Context is Populated**
   - The `SecurityContext` might not be populated if the user is not authenticated or if the security filters haven't run yet. Make sure that the user is authenticated when this code runs.

   You can check for an empty `SecurityContext` and log it:

   ```java
   ReactiveSecurityContextHolder.getContext()
       .switchIfEmpty(Mono.error(new RuntimeException("SecurityContext is empty!")))
       .map(SecurityContext::getAuthentication)
       .doOnNext(auth -> System.out.println("Authentication object: " + auth))
       .filter(auth -> auth instanceof OAuth2AuthenticationToken)
       .cast(OAuth2AuthenticationToken.class)
       .doOnNext(auth -> System.out.println("OAuth2AuthenticationToken: " + auth))
       .subscribe(auth -> addPermissionUnitFilter(auth, request),
           error -> System.err.println("Error: " + error.getMessage()));
   ```

   If the `SecurityContext` is empty, the error message will be logged.

### 5. **Check `addPermissionUnitFilter` Method**
   - Ensure that there’s no early return or logic within `addPermissionUnitFilter` that prevents its intended execution. If the method contains conditions that could prevent the main logic from executing, ensure those conditions are not met during this invocation.

### 6. **Verify Reactive Context Propagation**
   - In a reactive application, context (including `SecurityContext`) might not be automatically propagated if switching between different threads or reactive contexts. If the reactive chain isn't attached to the main WebFlux processing chain, it might not carry the security context over.

### Example Revised Code with Logging:

```java
ReactiveSecurityContextHolder.getContext()
    .switchIfEmpty(Mono.error(new RuntimeException("SecurityContext is empty!")))
    .map(SecurityContext::getAuthentication)
    .doOnNext(auth -> System.out.println("Authentication object: " + auth))
    .filter(auth -> auth instanceof OAuth2AuthenticationToken)
    .cast(OAuth2AuthenticationToken.class)
    .doOnNext(auth -> System.out.println("OAuth2AuthenticationToken: " + auth))
    .subscribe(
        auth -> {
            System.out.println("Calling addPermissionUnitFilter...");
            addPermissionUnitFilter(auth, request);
        },
        error -> System.err.println("Error: " + error.getMessage())
    );
```

### Conclusion:
- **Verify Logging**: Add logging to ensure that the authentication object is being correctly identified and passed through the chain.
- **Context Population**: Make sure the `SecurityContext` is populated when this code runs.
- **Check Request Context**: Ensure this is being executed within the correct context where the security filters have processed the request.

These steps should help identify where the issue lies and why `addPermissionUnitFilter` might not be getting called.


user-groups:
  - username: user1
    additional-groups:
      - infodir-eqd-group1
      - infodir-eqd-group2
  - username: user2
    additional-groups:
      - infodir-eqd-group3
  - username: user3
    additional-groups:
      - infodir-eqd-group1
      - infodir-eqd-group2
      - infodir-eqd-group3


import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import java.util.List;
import java.util.Map;

@Configuration
@ConfigurationProperties(prefix = "user-groups")
public class UserGroupsConfigProperties {

    private List<UserGroupConfig> config;

    public List<UserGroupConfig> getConfig() {
        return config;
    }

    public void setConfig(List<UserGroupConfig> config) {
        this.config = config;
    }

    public static class UserGroupConfig {
        private String username;
        private List<String> additionalGroups;

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public List<String> getAdditionalGroups() {
            return additionalGroups;
        }

        public void setAdditionalGroups(List<String> additionalGroups) {
            this.additionalGroups = additionalGroups;
        }
    }
}


import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.token.TokenEnhancer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class CustomTokenEnhancer implements TokenEnhancer {

    private final UserGroupsConfigProperties userGroupsConfig;

    public CustomTokenEnhancer(UserGroupsConfigProperties userGroupsConfig) {
        this.userGroupsConfig = userGroupsConfig;
    }

    @Override
    public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {
        Map<String, Object> additionalInfo = new HashMap<>();
        
        // Get existing groups from the token
        Map<String, Object> existingInfo = accessToken.getAdditionalInformation();
        List<String> existingGroups = (List<String>) existingInfo.getOrDefault("groups", new ArrayList<>());
        
        // Get username from authentication
        String username = authentication.getName();
        
        // Find additional groups for the user from configuration
        List<String> additionalGroups = findAdditionalGroupsForUser(username);
        
        // Combine existing and additional groups
        existingGroups.addAll(additionalGroups);
        
        additionalInfo.put("groups", existingGroups);
        
        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);
        
        return accessToken;
    }

    private List<String> findAdditionalGroupsForUser(String username) {
        return userGroupsConfig.getConfig().stream()
                .filter(config -> config.getUsername().equals(username))
                .findFirst()
                .map(UserGroupsConfigProperties.UserGroupConfig::getAdditionalGroups)
                .orElse(new ArrayList<>());
    }
}



// Configuration class
@Configuration
public class OAuth2Config extends AuthorizationServerConfigurerAdapter {

    @Autowired
    private TokenStore tokenStore;

    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(new CustomTokenEnhancer()));

        endpoints.tokenStore(tokenStore)
                 .tokenEnhancer(tokenEnhancerChain);
    }
}


import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
public class YourExistingController {

    @GetMapping("/your-existing-endpoint")
    public SomeResponseType yourExistingMethod() {
        // Get the authentication object from the SecurityContext
        OAuth2Authentication authentication = (OAuth2Authentication) SecurityContextHolder.getContext().getAuthentication();

        // Extract and process groups
        List<String> processedGroups = processGroups(authentication);

        // Your existing logic here
        // ...

        // Use processedGroups as needed
        // ...

        // Return your existing response
        return someResponse;
    }

    private List<String> processGroups(OAuth2Authentication authentication) {
        OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();
        Map<String, Object> decodedDetails = (Map<String, Object>) details.getDecodedDetails();
        
        List<String> groups = (List<String>) decodedDetails.get("groups");
        
        // Filter and process groups prefixed with "infodir-eqd"
        List<String> infodirEqdGroups = groups.stream()
            .filter(group -> group.startsWith("infodir-eqd"))
            .collect(Collectors.toList());
        
        // Perform your custom processing here
        for (String group : infodirEqdGroups) {
            // Add your custom logic for each group
            System.out.println("Processing group: " + group);
        }
        
        return infodirEqdGroups;
    }
}




